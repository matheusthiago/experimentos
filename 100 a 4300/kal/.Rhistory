dfDadosESC <- readRDS("~/Dropbox/Topicos de IA/dfDadosESC.rds")
plot(dfDadosESC)
a<p-c(1,2,3,4)
plot (a)
;
install.packages('ncdf4')
install.packages("libnetcdf6")
export NETCDF_INCLUDE=/usr/include
install.packages('devtools')
install.packages('ncdf4')
mx.mediaSplDia=matrix(data=mediaSpl, nrow=20, ncol = 30)
mx.mediaSplLac=t(mx.mediaSplDia)
df.mediaSplDia=as.data.frame((mx.mediaSplDia))
df.mediaSplLac=as.data.frame(mx.mediaSplLac)
names(df.mediaSplDia)=paste('Dia', 1:ncol(df.mediaSplDia), sep='')
names(df.mediaSplLac)=paste('Lac',1:ncol(df.mediaSplLac), sep='')
#o c2 indica media por coluna, o 1 media por linha
test=apply(df.mediaSplLac, c(2),mean)
test=data.frame(apply(df.mediaSplLac, c(2),mean))
#pegando a media das lacunas
test=data.frame(apply(df.mediaSplLac, c(2),mean))
#media do RMSE de cada lacuna de 10 de todos os dias até 2000 de todos os dias
mediaTotalSplDia= data.frame(tipoLac=names(test), media=test, row.names=NULL)
#diagrama de dispersão
plot(seq(100,2000,100), mediaTotalSplDia$media, xlab = "tamanho do gap", ylab = "media RMSE Spline", main = "Diagrama de dispersão" )
#correlação entre o tamanho do gap e o rmse
tamanhoGap= seq(100,2000,100)
cor(mediaTotalSplDia$media , tamanhoGap)
load("~/Dropbox/Experimentos 2019/experimento4/eperimento 4.RData")
mx.mediaSplDia=matrix(data=mediaSpl, nrow=20, ncol = 30)
mx.mediaSplLac=t(mx.mediaSplDia)
df.mediaSplDia=as.data.frame((mx.mediaSplDia))
df.mediaSplLac=as.data.frame(mx.mediaSplLac)
names(df.mediaSplDia)=paste('Dia', 1:ncol(df.mediaSplDia), sep='')
names(df.mediaSplLac)=paste('Lac',1:ncol(df.mediaSplLac), sep='')
#o c2 indica media por coluna, o 1 media por linha
test=apply(df.mediaSplLac, c(2),mean)
test=data.frame(apply(df.mediaSplLac, c(2),mean))
#pegando a media das lacunas
test=data.frame(apply(df.mediaSplLac, c(2),mean))
#media do RMSE de cada lacuna de 10 de todos os dias até 2000 de todos os dias
mediaTotalSplDia= data.frame(tipoLac=names(test), media=test, row.names=NULL)
#diagrama de dispersão
plot(seq(100,2000,100), mediaTotalSplDia$media, xlab = "tamanho do gap", ylab = "media RMSE Spline", main = "Diagrama de dispersão" )
#correlação entre o tamanho do gap e o rmse
tamanhoGap= seq(100,2000,100)
cor(mediaTotalSplDia$media , tamanhoGap)
#calculando a média do RMSE
mediaSsa=c()
mediaSpl=c()
mediaKal=c()
mediaSti=c()
mediaMal=c()
for (x in seq(from=1, to=1800, by =3)){
mediaSpl=append(mediaSpl,(mean(rmseSPL[x:(x+2)])))
mediaSsa=append(mediaSsa,(mean(rmseSSA[x:(x+2)])))
mediaKal=append(mediaKal,(mean(rmseKar[x:(x+2)])))
mediaSti=append(mediaSti,(mean(rmseSti[x:(x+2)])))
mediaMal=append(mediaMal,(mean(rmseMal[x:(x+2)])))
}
mx.mediaSplDia=matrix(data=mediaSpl, nrow=20, ncol = 30)
mx.mediaSplLac=t(mx.mediaSplDia)
df.mediaSplDia=as.data.frame((mx.mediaSplDia))
df.mediaSplLac=as.data.frame(mx.mediaSplLac)
names(df.mediaSplDia)=paste('Dia', 1:ncol(df.mediaSplDia), sep='')
names(df.mediaSplLac)=paste('Lac',1:ncol(df.mediaSplLac), sep='')
#o c2 indica media por coluna, o 1 media por linha
test=apply(df.mediaSplLac, c(2),mean)
test=data.frame(apply(df.mediaSplLac, c(2),mean))
#pegando a media das lacunas
test=data.frame(apply(df.mediaSplLac, c(2),mean))
#media do RMSE de cada lacuna de 10 de todos os dias até 2000 de todos os dias
mediaTotalSplDia= data.frame(tipoLac=names(test), media=test, row.names=NULL)
#diagrama de dispersão
plot(seq(100,2000,100), mediaTotalSplDia$media, xlab = "tamanho do gap", ylab = "media RMSE Spline", main = "Diagrama de dispersão" )
#correlação entre o tamanho do gap e o rmse
tamanhoGap= seq(100,2000,100)
cor(mediaTotalSplDia$media , tamanhoGap)
mediaSpl
mx.mediaSplDia=matrix(data=mediaSpl, nrow=20, ncol = 30)
mx.mediaSplDia
df.mediaSplDia=as.data.frame((mx.mediaSplDia))
df.mediaSplLac=as.data.frame(mx.mediaSplLac)
df.mediaSplDia
df.mediaSplLac
names(df.mediaSplDia)=paste('Dia', 1:ncol(df.mediaSplDia), sep='')
names(df.mediaSplLac)=paste('Lac',1:ncol(df.mediaSplLac), sep='')names(df.mediaSplDia)=paste('Dia', 1:ncol(df.mediaSplDia), sep='')
names(df.mediaSplLac)=paste('Lac',1:ncol(df.mediaSplLac), sep='')
names(df.mediaSplDia)=paste('Dia', 1:ncol(df.mediaSplDia), sep='')
names(df.mediaSplLac)=paste('Lac',1:ncol(df.mediaSplLac), sep='')
df.mediaSplDia
df.mediaSplLac
#o c2 indica media por coluna, o 1 media por linha
test=apply(df.mediaSplLac, c(2),mean)
test=data.frame(apply(df.mediaSplLac, c(2),mean))
#pegando a media das lacunas
test=data.frame(apply(df.mediaSplLac, c(2),mean))
test
#media do RMSE de cada lacuna de 10 de todos os dias até 2000 de todos os dias
mediaTotalSplDia= data.frame(tipoLac=names(test), media=test, row.names=NULL)
mediaTotalSplDia
mediaTotalSplDia
n=10
for (n in seq(1,10,1)) {
set.seed(1)
}
for (n in seq(1,10,1)) {
set.seed(1)
}
for (n in seq(1,10,1)) {
set.seed(1) print(sample(c(1:10), n, replace = FALSE))
}
for (n in seq(1,10,1)) {
set.seed(1); print(sample(c(1:10), n, replace = FALSE))
}
length(seq(from=1, to=2160, by=1))
length(seq(from=1, to=2160, by=1))*30
quit()
file.edit("~/.Rprofile")
file.edit("~/.Rprofile")
setwd(dir = "Dropbox/Experimentos 2019/experimento 5/experimentos/kal/")
rm(list = ls())
dia=1
i=1
dfDados=readRDS(file="../dfDadosESC.norm.rds")
dfDados=readRDS(file="../dfDadosESC.norm.rds")
#experimento 5
#script para verificar a acurácia do método e o seu uso de recursos: Kalman Arima;
#O experimento foi feito  para a verificação de lacunas de 1 a 100 gaps seguidos ao passo de 1
# com o total de 300 experimentos por dia.
#Para cada experimento, a lacuna foi  colocada a partir do ponto 2160, 4320 e 6480
# library para o cálculo do rmse
require(Metrics)
#usando imputTS para fazer imputações de dados
require(imputeTS)
dadoDia=dfDados$dados[which(dfDados$dia==dia)]
dadoTemp=dadoDia
piso=startPoint
teto=startPoint+n
dadoTemp[piso:teto]=NA #cria espaços em branco
rm(list = ls())
dia=1
i=1
dfDados=readRDS(file="../dfDadosESC.norm.rds")
n=1
startPoint=2160
iteracao=1
rmseKal=c()
#print(paste("n:",n," interação:", interacao, " dia:",dia, " i:", i))
dadoDia=dfDados$dados[which(dfDados$dia==dia)]
#laço de tamanho do gap
#laço de divisão da série temporal (distribuição de gaps)
dadoTemp=dadoDia
piso=startPoint
teto=startPoint+n
dadoTemp[piso:teto]=NA #cria espaços em branco
kalArima= na.kalman(dadoTemp,type ="trend")
rmseKal<-append(rmseKal,(rmse(dadoDia[piso:teto],(kalArima[piso:teto]))))
rmseKal
n=n+iteracao
n
startPoint
i
teto
n=101
if(n>100){
n=1
startPoint=startPoint+2160
if(startPoint>6480){
startPoint=2160
dia=dia+1
}
}
n
startPoint
n=101
dia
if(n>100){
n=1
startPoint=startPoint+2160
if(startPoint>6480){
startPoint=2160
dia=dia+1
}
}
i=i+1
dia
startPoint
dia
n
n=101
if(n>100){
n=1
startPoint=startPoint+2160
if(startPoint>6480){
startPoint=2160
dia=dia+1
}
}
n
dia
startPoint
a=c(seq(1:100))
length(a)
a * 3
length(a)*3*30
